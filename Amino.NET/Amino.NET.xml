<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Amino.NET</name>
    </assembly>
    <members>
        <member name="P:Amino.Client.deviceID">
            <summary>
            Represents the current device ID used by the current Client
            </summary>
        </member>
        <member name="P:Amino.Client.sessionID">
            <summary>
            Represents the current Session ID of the current Client / Amino account instance
            </summary>
        </member>
        <member name="P:Amino.Client.secret">
            <summary>
            Represents the Login Secret of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.userID">
            <summary>
            Represents the current user ID (object ID) of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.json">
            <summary>
            Represents the full JSON response of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.googleID">
            <summary>
            Represents the google ID of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.appleID">
            <summary>
            Represents the apple ID of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.facebookID">
            <summary>
            Represents the facebook ID of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.twitterID">
            <summary>
            Represents the twitter ID of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.iconURL">
            <summary>
            Represents the Icon image URL of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.aminoID">
            <summary>
            Represents the amino ID of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.email">
            <summary>
            Represents the email address of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.phoneNumber">
            <summary>
            Represents the phone number of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.nickname">
            <summary>
            Represents the nickname of the current Amino account
            </summary>
        </member>
        <member name="P:Amino.Client.is_Global">
            <summary>
            Represents if the current Amino accounts profile is profile or not
            </summary>
        </member>
        <member name="P:Amino.Client.debug">
            <summary>
            Represents the current Clients debug state, if put to true, all API responses and webSocket messages get printed to Trace
            </summary>
        </member>
        <member name="E:Amino.Client.onMessage">
            <summary>
            Fires each time an Amino Text Message has been received by the current Amino account
            </summary>
        </member>
        <member name="E:Amino.Client.onImageMessage">
            <summary>
            Fires each time an Amino Image Message has been received by the current Amino account
            </summary>
        </member>
        <member name="E:Amino.Client.onWebSocketMessage">
            <summary>
            Fires each time an Amino WebSocket Message has been receveived by the current Amino Client
            </summary>
        </member>
        <member name="E:Amino.Client.onYouTubeMessage">
            <summary>
            Fires each time an Amino YouTube message has been received by the current Amino account
            </summary>
        </member>
        <member name="E:Amino.Client.onVoiceMessage">
            <summary>
            Fires each time an Amino Voice message / note has been received by the current Amino account
            </summary>
        </member>
        <member name="E:Amino.Client.onStickerMessage">
            <summary>
            Fires each time an Amino Sticker message has been received by the current Amino account
            </summary>
        </member>
        <member name="E:Amino.Client.onMessageDeleted">
            <summary>
            Fires each time an Amino message has been deleted (in a chat where the current Amino account is in)
            </summary>
        </member>
        <member name="E:Amino.Client.onChatMemberJoin">
            <summary>
            Fires each time an Amino member joined a chat where the current Amino account is in
            </summary>
        </member>
        <member name="E:Amino.Client.onChatMemberLeave">
            <summary>
            Fires each time an Amino member left a chat where the current Amino account is in
            </summary>
        </member>
        <member name="E:Amino.Client.onChatBackgroundChanged">
            <summary>
            Fires each time an Amino chat background has changed (only chats where the current Amino account is in)
            </summary>
        </member>
        <member name="E:Amino.Client.onChatTitleChanged">
            <summary>
            Fires each time an Amino chat title has been changed (only chats where the current Amino account is in)
            </summary>
        </member>
        <member name="M:Amino.Client.#ctor(System.String)">
            <summary>
            Creates an instance of the Amino.Client object and builds headers
            <para>This object can hold a deviceId, if left empty, it will generate one.</para>
            </summary>
            <param>This object can hold a deviceId, if left empty, it will generate one.</param>
            <param name="_deviceID"></param>
        </member>
        <member name="M:Amino.Client.request_verify_code(System.String,System.Boolean)">
            <summary>
            Allows you to request a verification code for amino
            <para>This function requires an email address, to reset a password, put the resetPassword alue to true</para>
            </summary>
            <param name="email"></param>
            <param name="resetPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.login(System.String,System.String,System.String)">
            <summary>
            Allows you to log into your account
            <para>This function will set all client values and w√≠ll enable the webSocket to activate</para>
            <para>Successfully calling this function will enable the Client events</para>
            </summary>
            <param name="_email"></param>
            <param name="_password"></param>
            <param name="_secret"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.logout">
            <summary>
            Allows you to log out of the current account
            <para>A successful function call will clear the Client values and close the webSocket connection</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.register(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Allows you to register an Amino account
            <para>This function requires a verification code, refer to <b>request_verify_code()</b></para>
            </summary>
            <param name="_name"></param>
            <param name="_email"></param>
            <param name="_password"></param>
            <param name="_verificationCode"></param>
            <param name="_deviceID"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.restore_account(System.String,System.String,System.String)">
            <summary>
            Allows you to restore an Amino account
            </summary>
            <param name="_email"></param>
            <param name="_password"></param>
            <param name="_deviceID"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.delete_account(System.String)">
            <summary>
            Allows you to delete the current Amino account
            <para>This function requires a verification code, refer to <b>request_verify_code()</b></para>
            </summary>
            <param name="_password"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.activate_account(System.String,System.String,System.String)">
            <summary>
            Allows you to activate the current Amino account
            <para>This function requires a verification code, refer to <b>request_verify_code()</b></para>
            </summary>
            <param name="_email"></param>
            <param name="_verificationCode"></param>
            <param name="_deviceID"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.configure_account(Amino.Types.account_gender,System.Int32)">
            <summary>
            Allows you to configure the current Amino account
            </summary>
            <param name="_gender"></param>
            <param name="_age"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.change_password(System.String,System.String,System.String)">
            <summary>
            Allows you to change the password of the current Amino account
            </summary>
            <param name="_email"></param>
            <param name="_password"></param>
            <param name="_verificationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.get_user_info(System.String)">
            <summary>
            Allows you to get information about a user Profile
            </summary>
            <param name="_userId"></param>
            <returns>Object : Amino.Objects.GlobalProfile</returns>
        </member>
        <member name="M:Amino.Client.check_device(System.String)">
            <summary>
            Allows you to check if a Device ID is valid
            </summary>
            <param name="_deviceId"></param>
            <returns>bool : true / false</returns>
        </member>
        <member name="M:Amino.Client.get_event_log">
            <summary>
            Allows you to get the event log of the current Amino account
            </summary>
            <returns>Object : Amino.Objects.EventLog</returns>
        </member>
        <member name="M:Amino.Client.get_subClient_communities(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of Communities the current Amino account is in
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.Community</returns>
        </member>
        <member name="M:Amino.Client.get_subClient_profiles(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of community profiles of the current Amino account
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.CommunityProfile</returns>
        </member>
        <member name="M:Amino.Client.get_account_info">
            <summary>
            Allows you to get information about the current Amino account
            </summary>
            <returns>Object : Amino.Objects.UserAccount</returns>
        </member>
        <member name="M:Amino.Client.get_chat_threads(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of chat threads the current Amino account is in 
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.Chat</returns>
        </member>
        <member name="M:Amino.Client.get_chat_thread(System.String)">
            <summary>
            Allows you to get a single chat thread using a chatId
            </summary>
            <param name="chatId"></param>
            <returns>Object : Amino.Objects.Chat</returns>
        </member>
        <member name="M:Amino.Client.get_chat_users(System.String,System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of users within a chat thread
            </summary>
            <param name="chatId"></param>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.ChatMember</returns>
        </member>
        <member name="M:Amino.Client.join_chat(System.String)">
            <summary>
            Allows you to join a chat with the current Amino account
            </summary>
            <param name="chatId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.leave_chat(System.String)">
            <summary>
            Allows you to leave a chat with the current Amino account
            </summary>
            <param name="chatId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.invite_to_chat(System.String[],System.String)">
            <summary>
            Allows you to invite one or multiple members into a chat thread with the current Amino account
            </summary>
            <param name="userIds"></param>
            <param name="chatId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.kick_from_chat(System.String,System.String,System.Boolean)">
            <summary>
            Allows you to kick someone from a chat thread with the current Amino account
            </summary>
            <param name="userId"></param>
            <param name="chatId"></param>
            <param name="allowRejoin"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.get_chat_messages(System.String,System.Int32,System.String)">
            <summary>
            Allows you to get a list of chat messages of a specific chat
            </summary>
            <param name="chatId"></param>
            <param name="size"></param>
            <param name="pageToken"></param>
            <returns>List : Amino.Objects.MessageCollection</returns>
        </member>
        <member name="M:Amino.Client.search_community(System.String)">
            <summary>
            Allows you to search a community based on its ID (aminoId <b>not</b> objectId) and get information about it
            </summary>
            <param name="aminoId"></param>
            <returns>List : Amino.Objects.CommunityInfo</returns>
        </member>
        <member name="M:Amino.Client.get_user_following(System.String,System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of users a person is following
            </summary>
            <param name="userId"></param>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.UserFollowings</returns>
        </member>
        <member name="M:Amino.Client.get_user_followers(System.String,System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of users that follow a person
            </summary>
            <param name="userId"></param>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Obejcts.UserFollowings</returns>
        </member>
        <member name="M:Amino.Client.get_user_visitors(System.String,System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of users that visited a persons Amino account page
            </summary>
            <param name="userId"></param>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.UserVisitor</returns>
        </member>
        <member name="M:Amino.Client.get_blocked_users(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of users the current Amino account has blocked
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.BlockedUser</returns>
        </member>
        <member name="M:Amino.Client.get_blocker_users(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of userIds of the users that have blocked the current Amino account
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : string</returns>
        </member>
        <member name="M:Amino.Client.get_wall_comments(System.String,Amino.Types.Sorting_Types,System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of wall comments on a persons Amino Profile
            </summary>
            <param name="userId"></param>
            <param name="type"></param>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.Comment</returns>
        </member>
        <member name="M:Amino.Client.flag(System.String,Amino.Types.Flag_Types,Amino.Types.Flag_Targets,System.String,System.Boolean)">
            <summary>
            Allows you to flag a post with or without the current Amino account
            </summary>
            <param name="reason"></param>
            <param name="flagType"></param>
            <param name="targetType"></param>
            <param name="targetId"></param>
            <param name="asGuest"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.delete_message(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Allows you to delete a message in a chat thread with the current Amino account
            </summary>
            <param name="chatId"></param>
            <param name="messageId"></param>
            <param name="asStaff"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.mark_as_read(System.String,System.String)">
            <summary>
            Allows you to mark a message as read with the current Amino account
            </summary>
            <param name="_chatId"></param>
            <param name="_messageId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.visit(System.String)">
            <summary>
            Allows you to visit a users Amino profile
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.follow_user(System.String)">
            <summary>
            Allows you to follow a user with the current Amino account
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.unfollow_user(System.String)">
            <summary>
            Allows you to unfollow a user with the current Amino account
            </summary>
            <param name="_userId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.block_user(System.String)">
            <summary>
            Allows you to block a user with the current Amino account
            </summary>
            <param name="_userId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.unblock_user(System.String)">
            <summary>
            Allows you to unblock a user with the current Amino account
            </summary>
            <param name="_userId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.join_community(System.String,System.String)">
            <summary>
            Allows you to join a community with the current Amino account
            </summary>
            <param name="communityId"></param>
            <param name="invitationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.join_community_request(System.String,System.String)">
            <summary>
            Allows you to request membership to a community with the current Amino account
            </summary>
            <param name="communityId"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.leave_community(System.String)">
            <summary>
            Allows you to leave a community with the current Amino account
            </summary>
            <param name="communityId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.flag_community(System.String,System.String,Amino.Types.Flag_Types,System.Boolean)">
            <summary>
            Allows you to flag a community usign the current Amino account
            </summary>
            <param name="communityId"></param>
            <param name="reason"></param>
            <param name="flagType"></param>
            <param name="asGuest"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.upload_media(System.String,Amino.Types.upload_File_Types)">
            <summary>
            Allows you to upload media files to the Amino servers
            </summary>
            <param name="filePath"></param>
            <param name="type"></param>
            <returns>string : The URL to the media file you just uploaded</returns>
        </member>
        <member name="M:Amino.Client.upload_media(System.Byte[],Amino.Types.upload_File_Types)">
            <summary>
            Allows you to upload media files to the Amino servers
            </summary>
            <param name="file"></param>
            <param name="type"></param>
            <returns>string : The URL to the media file you just uploaded</returns>
        </member>
        <member name="M:Amino.Client.edit_profile(System.String,System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Allows you to edit the profile page of the current Amino account
            </summary>
            <param name="nickname"></param>
            <param name="content"></param>
            <param name="icon"></param>
            <param name="backgroundColor"></param>
            <param name="backgroundMediaUrl"></param>
            <param name="defaultChatbubbleId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.set_privacy_status(System.Boolean,System.Boolean)">
            <summary>
            Allows you to set the privacy status of the current Amino account
            </summary>
            <param name="isAnonymous"></param>
            <param name="getNotifications"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.set_amino_id(System.String)">
            <summary>
            Allows you to set the Amino ID of the current Amino account
            </summary>
            <param name="aminoId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.add_linked_community(System.Int32)">
            <summary>
            Adds a linked community to the current Amino profile
            </summary>
            <param name="communityId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.remove_linked_community(System.Int32)">
            <summary>
            Removes a linked community from the current Amino profile
            </summary>
            <param name="communityId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.comment(System.String,Amino.Types.Comment_Types,System.String)">
            <summary>
            Allows you to comment on a wall / post using the current Amino account
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.delete_comment(System.String,Amino.Types.Comment_Types,System.String)">
            <summary>
            Allows you to delete a comment from a users wall / post using the current Amino account
            </summary>
            <param name="commentId"></param>
            <param name="type"></param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.like_post(System.String,Amino.Types.Post_Types)">
            <summary>
            Allows you to like a post using the current Amino account
            </summary>
            <param name="objectId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.unlike_post(System.String,Amino.Types.Post_Types)">
            <summary>
            Allows you to remove a like on a post using the current Amino account
            </summary>
            <param name="objectId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.get_membership_info">
            <summary>
            Allows you to get the Amino+ membership status of the current Amino account
            </summary>
            <returns>Object : Amino.Objects.MembershipInfo</returns>
        </member>
        <member name="M:Amino.Client.get_ta_announcements(Amino.Types.Supported_Languages,System.Int32,System.Int32)">
            <summary>
            Allows you to get the Team Amino announcement Posts
            </summary>
            <param name="language"></param>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Obejcts.Amino.Post</returns>
        </member>
        <member name="M:Amino.Client.get_wallet_info">
            <summary>
            Allows you to get the current Amino accounts wallet info
            </summary>
            <returns>Object : Objects.WalletInfo</returns>
        </member>
        <member name="M:Amino.Client.get_wallet_history(System.Int32,System.Int32)">
            <summary>
            Allows you to get the wallet transaction history of the current Amino account
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.CoinHistoryEntry</returns>
        </member>
        <member name="M:Amino.Client.get_from_deviceId(System.String)">
            <summary>
            Allows you to get a user ID based on a device ID
            </summary>
            <param name="deviceId"></param>
            <returns>string : the target users ID</returns>
        </member>
        <member name="M:Amino.Client.get_from_code(System.String)">
            <summary>
            Allows you to get information an Amino URL
            </summary>
            <param name="aminoUrl"></param>
            <returns>Object : Amino.Objects.FromCode</returns>
        </member>
        <member name="M:Amino.Client.get_from_id(System.String,Amino.Types.Object_Types,System.String)">
            <summary>
            Allows you to get information about an Amino ID
            </summary>
            <param name="objectId"></param>
            <param name="type"></param>
            <param name="communityId"></param>
            <returns>Object : Amino.Objects.FromId</returns>
        </member>
        <member name="M:Amino.Client.get_supported_languages">
            <summary>
            Allows you to get the supported langauges of Amino
            </summary>
            <returns>string[] : language keys</returns>
        </member>
        <member name="M:Amino.Client.claim_new_user_coupon">
            <summary>
            Allows you to claim the new user coupon using the current Amino account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.get_all_users(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of Amino users
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Objects.UserProfile</returns>
        </member>
        <member name="M:Amino.Client.accept_host(System.String,System.String)">
            <summary>
            Allows you to accept host / organizer of a chatroom with the current Amino account
            </summary>
            <param name="chatId"></param>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.accept_organizer(System.String,System.String)">
            <summary>
            Allows you to accept host / organizer of a chatroom with the current Amino account
            </summary>
            <param name="chatId"></param>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.link_identify(System.String)">
            <summary>
            Allows you to get information about an Amino Invite Code
            </summary>
            <param name="inviteCode"></param>
            <returns>Obejct : Amino.Objects.FromInvite</returns>
        </member>
        <member name="M:Amino.Client.wallet_config(Amino.Types.Wallet_Config_Levels)">
            <summary>
            Allows you to change the wallet config of the current Amino account
            </summary>
            <param name="walletLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Amino.Client.get_avatar_frames(System.Int32,System.Int32)">
            <summary>
            Allows you to get a list of available Avatar Frames of the current Amino account
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns>List : Amino.Object.AvatarFrame</returns>
        </member>
        <member name="T:Amino.Client.Events">
            <summary>
            Handles the Event calls, do not manually interact with this Class or its functions!
            </summary> 
        </member>
        <member name="T:Amino.Events.EventHandler">
            <summary>
            This class is responsible for all Events of Amino.Net
            </summary>
        </member>
        <member name="M:Amino.Events.EventHandler.ReceiveEvent(Newtonsoft.Json.Linq.JObject,Amino.Client)">
            <summary>
            This function handles the websocket responses and converts them into objects to call events with
            </summary>
            <param name="webSocketMessage"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="F:Amino.helpers.BaseUrl">
            <summary>
            This value represents the baseURL to Aminos REST backend
            </summary>
        </member>
        <member name="M:Amino.helpers.generate_signiture(System.String)">
            <summary>
            This function allows you to generate an Amino valid signiture based on JSON data
            </summary>
            <param name="data"></param>
            <returns>string : The signiture.</returns>
        </member>
        <member name="M:Amino.helpers.generate_file_signiture(System.Byte[])">
            <summary>
            This function allows you to generate an Amino valid signiture for file uploads
            </summary>
            <param name="data"></param>
            <returns>string : The signiture.</returns>
        </member>
        <member name="M:Amino.helpers.generate_device_id">
            <summary>
            This function allows you to generate an Amino valid device ID
            </summary>
            <returns>string : The Device ID</returns>
        </member>
        <member name="M:Amino.helpers.GetTimestamp">
            <summary>
            This function allows you to get the current UNIX Timestamp (NOT Amino valid)
            </summary>
            <returns>double : The current UNIX Timestamp</returns>
        </member>
        <member name="M:Amino.helpers.get_ObjectTypeID(Amino.Types.Object_Types)">
            <summary>
            This function allows you to get the Type ID based on Amino.Types.Object_Types
            </summary>
            <param name="type"></param>
            <returns>int : the object ID index thingie</returns>
        </member>
        <member name="T:Amino.Types.account_gender">
            <summary>
            Account gender properties
            </summary>
        </member>
        <member name="T:Amino.Types.Call_Types">
            <summary>
            Types of different Amino calls
            </summary>
        </member>
        <member name="T:Amino.Types.Call_Permission_Types">
            <summary>
            Types for call permissions
            </summary>
        </member>
        <member name="T:Amino.Types.Flag_Types">
            <summary>
            Types to flag stuff
            </summary>
        </member>
        <member name="T:Amino.Types.File_Types">
            <summary>
            Aminos supported file types
            </summary>
        </member>
        <member name="T:Amino.Types.upload_File_Types">
            <summary>
            Supported File types for raw uploads
            </summary>
        </member>
        <member name="T:Amino.Types.Sorting_Types">
            <summary>
            Sorting types for stuff
            </summary>
        </member>
        <member name="T:Amino.Types.Repair_Types">
            <summary>
            Repair types for Amino+
            </summary>
        </member>
        <member name="T:Amino.Types.Activity_Status_Types">
            <summary>
            Activity status types.
            </summary>
        </member>
        <member name="T:Amino.Types.Chat_Publish_Types">
            <summary>
            Types for chat settings
            </summary>
        </member>
        <member name="M:Amino.WebSocketHandler.#ctor(Amino.Client)">
            <summary>
            If you're trying to experiment with this package, there's no one to stop you, tho playing with the WebSocketHandler can lead to runtime issues I will not account for.
            </summary>
        </member>
    </members>
</doc>
